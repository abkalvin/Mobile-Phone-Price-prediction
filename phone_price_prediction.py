# -*- coding: utf-8 -*-
"""Phone Price Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-rb61J5w9rHFQw93bGm8a1zW52VCMrI7
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import LinearRegression  
from sklearn.metrics import accuracy_score, roc_auc_score
from sklearn.metrics import roc_curve, precision_recall_curve
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score 
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

from google.colab import files


uploaded = files.upload()

from google.colab import files


uploaded = files.upload()

train = pd.read_csv('train.csv')
print(train.head())

y = train.price_range

y = train.price_range

y = y.replace({1: 0, 2: 1, 3: 1, 4: 1})

X = train.drop('price_range', axis=1)

divide_seed = np.random.randint(1, 100)


X_train, X_test, y_train, y_test = model_selection.train_test_split(
    X, y, test_size=0.3, random_state=divide_seed)

scaler = StandardScaler()

scaler.fit(X_train)
X_train = scaler.transform(X_train)

scaler.fit(X_test)
X_test = scaler.transform(X_test)

print(len(X_train))
print(len(X_test))
print(len(y_train))
print(len(y_test))

train.info()

print(train.columns)

print(train.shape)

print(pd.isnull(train).sum())

print(train.describe())

train.dtypes

print(x_train.shape)
print(x_valid.shape)

fig = plt.subplots (figsize = (12, 12))
sns.heatmap(train.corr (), square = True, cbar = True, annot = True, cmap="GnBu", annot_kws = {'size': 8})
plt.title('Correlations between Attributes')
plt.show ()

ls = LinearRegression()

ls.fit(x_train, y_valid)

prediction_ls = ls.predict(x_train)

print("Test result:", ls.score(x_train, y_valid))

print("Train result:", ls.score(x_train, y_valid))

lr = LogisticRegression(multi_class = 'multinomial', solver = 'sag',  max_iter = 10000)
print(lr.fit(X_train, y_train))


y_pred_lr = lr.predict(X_train)

confusion_matrix = metrics.confusion_matrix(y_train, y_pred_lr)
print(confusion_matrix)

acc_lr = metrics.accuracy_score(y_train, y_pred_lr)
print(acc_lr)
print("Test result:", lr.score(X_test, y_test))

print("Train result:", lr.score(X_train, y_train))

y_pred_lr = lr.predict(x_valid)

confusion_matrix = metrics.confusion_matrix(y_valid, y_pred_lr)
confusion_matrix

acc_lr = metrics.accuracy_score(y_valid, y_pred_lr)
acc_lr